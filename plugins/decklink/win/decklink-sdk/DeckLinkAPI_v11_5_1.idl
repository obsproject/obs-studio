/* -LICENSE-START-
** Copyright (c) 2020 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
** 
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/
/* DeckLinkAPI_v11_5_1.idl */

// Enumeration Mapping

/* Enum BMDDeckLinkStatusID - DeckLink Status ID */

typedef [v1_enum] enum	_BMDDeckLinkStatusID_v11_5_1 {

    /* Video output flags */

    bmdDeckLinkStatusDetectedVideoInputFlags_v11_5_1                     = /* 'dvif' */ 0x64766966,

} BMDDeckLinkStatusID_v11_5_1;

/* Interface IDeckLinkInputCallback_v11_5_1 - Frame arrival callback. */

[
    object,
    uuid(DD04E5EC-7415-42AB-AE4A-E80C4DFC044A),
    helpstring("Frame arrival callback.")
] interface IDeckLinkInputCallback_v11_5_1 : IUnknown
{
    HRESULT VideoInputFormatChanged ([in] BMDVideoInputFormatChangedEvents notificationEvents, [in] IDeckLinkDisplayMode* newDisplayMode, [in] BMDDetectedVideoInputFormatFlags detectedSignalFlags);
    HRESULT VideoInputFrameArrived ([in] IDeckLinkVideoInputFrame* videoFrame, [in] IDeckLinkAudioInputPacket* audioPacket);
};

/* Interface IDeckLinkInput_v11_5_1 - Created by QueryInterface from IDeckLink. */

[
    object,
    uuid(9434C6E4-B15D-4B1C-979E-661E3DDCB4B9),
    helpstring("Created by QueryInterface from IDeckLink.")
] interface IDeckLinkInput_v11_5_1 : IUnknown
{
    HRESULT DoesSupportVideoMode ([in] BMDVideoConnection connection /* If a value of bmdVideoConnectionUnspecified is specified, the caller does not care about the connection */, [in] BMDDisplayMode requestedMode, [in] BMDPixelFormat requestedPixelFormat, [in] BMDVideoInputConversionMode conversionMode, [in] BMDSupportedVideoModeFlags flags, [out] BMDDisplayMode* actualMode, [out] BOOL* supported);
    HRESULT GetDisplayMode ([in] BMDDisplayMode displayMode, [out] IDeckLinkDisplayMode** resultDisplayMode);
    HRESULT GetDisplayModeIterator ([out] IDeckLinkDisplayModeIterator** iterator);
    HRESULT SetScreenPreviewCallback ([in] IDeckLinkScreenPreviewCallback* previewCallback);

    /* Video Input */

    HRESULT EnableVideoInput ([in] BMDDisplayMode displayMode, [in] BMDPixelFormat pixelFormat, [in] BMDVideoInputFlags flags);
    HRESULT DisableVideoInput (void);
    HRESULT GetAvailableVideoFrameCount ([out] unsigned int* availableFrameCount);
    HRESULT SetVideoInputFrameMemoryAllocator ([in] IDeckLinkMemoryAllocator* theAllocator);

    /* Audio Input */

    HRESULT EnableAudioInput ([in] BMDAudioSampleRate sampleRate, [in] BMDAudioSampleType sampleType, [in] unsigned int channelCount);
    HRESULT DisableAudioInput (void);
    HRESULT GetAvailableAudioSampleFrameCount ([out] unsigned int* availableSampleFrameCount);

    /* Input Control */

    HRESULT StartStreams (void);
    HRESULT StopStreams (void);
    HRESULT PauseStreams (void);
    HRESULT FlushStreams (void);
    HRESULT SetCallback ([in] IDeckLinkInputCallback_v11_5_1* theCallback);

    /* Hardware Timing */

    HRESULT GetHardwareReferenceClock ([in] BMDTimeScale desiredTimeScale, [out] BMDTimeValue* hardwareTime, [out] BMDTimeValue* timeInFrame, [out] BMDTimeValue* ticksPerFrame);
};

